---
import Layout from "../../layouts/Layout.astro";
import { allPlaylists, playlists, songs } from "../../lib/data";
import PlaylistSongCard from "../../components/PlaylistSongCard.astro";
import ClockLogo from "../../icons/Clock.astro";
import PlayLogo from "../../icons/Play.astro";

const { playlistId } = Astro.params;

const playlist = allPlaylists.find((playlist) => playlist.id === playlistId);
const playlistSongs = songs.filter(
  (song) => song.albumId === playlist?.albumId
);

// Función para convertir "mm:ss" a segundos
const convertToSeconds = (duration: string): number => {
  const [minutes, seconds] = duration.split(":").map(Number);
  return minutes * 60 + seconds;
};

// Calcular la duración total en segundos
const totalDurationInSeconds = playlistSongs.reduce((total, song) => {
  return total + convertToSeconds(song.duration);
}, 0);

// Convertir la duración total de segundos a "hh:mm:ss"
const formatDuration = (totalSeconds: number): string => {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = totalSeconds % 60;
  return `${hours > 0 ? hours + ":" : ""}${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
};

const totalDurationFormatted = formatDuration(totalDurationInSeconds);
---

<Layout title={playlist ? playlist.title : "Playlist not found"}>
  {
    playlist ? (
      <div
        id="playlist-container"
        class="relative transition-all duration-1000 bg-green-800"
      >
        <div class="relative z-10  pt-10">
          <div id="header" class="flex items-center px-4">
            <div class="max-w-60 h-auto">
              <img
                class="rounded-[4px]"
                src={playlist.cover}
                alt={`Cover of ${playlist.title}`}
              />
            </div>
            <span class="ml-6 text-white space-y-10">
              <p class="text-sm">Playlist</p>
              <h1 class="text-6xl font-extrabold">{playlist.title}</h1>
              <p class="text-zinc-300 text-md">
                • {playlistSongs.length} Canciones, Duracion total:{" "}
                {totalDurationFormatted}
              </p>
            </span>
          </div>
          <div id="mid" class="my-2 bg-black/15 w-full py-2 min-h-[60vh]">
            <div class="flex items-center ">
              <div title=`Reproducir ${playlist.title}` class="bg-green-500 p-2 rounded-full  mx-5 cursor-pointer">
                <PlayLogo class="h-6 w-6 text-white " />
              </div>
            </div>
          
          <div>
            <div
              id="container"
              class="grid grid-rows-1  mb-1 py-2 rounded-md px-5 text-zinc-400 bg-white/0 "
            >
              <span>#</span>
              <span>Título</span>
              <span>Álbum</span>
              <span class="ml-1">
                <ClockLogo />
              </span>
            </div>
            <hr class="border-zinc-200 border-opacity-10 my-1" />
            <ul class="my-1 px-2">
              {playlistSongs.map((song) => (
                <PlaylistSongCard song={song} />
              ))}
            </ul>
          </div>
          <div class="absolute inset-0 bg-gradient-to-t from-zinc-900 via-zinc-900/40 to-transparent -z-[1]" />
        </div>
      </div>
    </div>
    ) : (
      <p>Playlist not found</p>
    )
  }
</Layout>

<style>
  #container {
    grid-template-columns: 0.1fr 1.5fr 1.5fr 0.1fr;
    align-items: center;
  }
</style>