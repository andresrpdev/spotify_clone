---
import PlaylistSongCard from "../../components/PlaylistSongCard.astro"
import Layout from "../../layouts/Layout.astro"
import { allPlaylists, songs } from "../../lib/data"
import GreenButton from "../../components/greenButton"
const { playlistId } = Astro.params

const playlist = allPlaylists.find((playlist) => playlist.id === playlistId)
const playlistSongs = songs.filter((song) => song.albumId === playlist?.albumId)

// Función para convertir "mm:ss" a segundos
const convertToSeconds = (duration: string): number => {
  const [minutes, seconds] = duration.split(":").map(Number);
  return minutes * 60 + seconds;
};

// Calcular la duración total en segundos
const totalDurationInSeconds = playlistSongs.reduce((total, song) => {
  return total + convertToSeconds(song.duration);
}, 0);

// Convertir la duración total de segundos a "hh:mm:ss"
const formatDuration = (totalSeconds: number): string => {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = totalSeconds % 60;
  return `${hours > 0 ? hours + ":" : ""}${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
};

const totalDurationFormatted = formatDuration(totalDurationInSeconds);
---

<Layout title={playlist?.title}>
  <div
    id="playlist-container"
    class="relative flex flex-col h-full bg-zinc-900 overflow-x-hidden bg-gradient-to-t from-50% from-zinc-900 via-zinc-900/80"
    style={`background-color: ${playlist?.color.accent}`}
    transition:name=`playlist ${playlistId} box`
  >
    <!-- <PageHeader /> -->

    <header class="flex flex-row gap-8 px-6 mt-12">
      <picture class="aspect-square w-52 h-52 flex-none ">
        <img
          src={playlist?.cover}
          alt={`Cover of ${playlist?.title}`}
          class="object-cover w-full h-full shadow-2xl rounded-md "
          transition:name=`playlist ${playlist?.id} image`
        />
      </picture>

      <div class="flex flex-col justify-between">
        <h2 class="flex flex-1 items-end text-white font-semibold">Playlist</h2>
        <div>
          <h1 class="text-5xl font-bold block text-white">
            <span transition:name=`playlist ${playlist?.id} title`>
                {playlist?.title}
            </span>
          </h1>
        </div>

        <div class="flex-1 flex items-end">
          <div class="text-sm text-gray-300 font-normal">
            <div transition:name=`playlist ${playlist?.id} artists`>
              <span>{playlist?.artists.join(", ")}</span>
            </div>
            <p class="mt-1">
              <span class="text-white">{playlistSongs.length} canciones</span>,
              {totalDurationFormatted} Minutos
            </p>
          </div>
        </div>
      </div>
    </header>
  <section id="playlist-main" class="bg-black/10 flex-1 mt-6">
    <div class="pl-6 pt-6 flex">
      <GreenButton id={playlistId} className={"w-16 h-16"} client:load/>
    </div>

    <div class="relative z-10 px-6 pt-10"></div>

    <section class="p-2 ">
      <ul>
        <li>
          <div id="container" class="grid grid-rows-1 p-3 rounded-md px-3 text-zinc-400">
              <p class="ml-3">#</p>
              <div class="flex">
                  Título
              </div>
              <p class="ml-3">Album</p>
              <p>Duracion</p>
          </div>
      </li>
      {playlistSongs.map((song) => (
        <PlaylistSongCard song={song} />
      ))}
      
      </ul>
    </section>
  </section>
  </div>
  <style>
    #container {
        grid-template-columns: .1fr 1.5fr 1.5fr 0.1fr;
        align-items: center;
    }
</style>
</Layout>